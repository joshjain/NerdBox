% two layer neural network experiment using MNIST handwritten dataset.  
% Assume all model bias are zero (equal bias later?)
% Use the sigmoid activation function (logistic function). 

% (i) the overall architecture of the system (how input nodes represent given 
% examples, how many hidden units/hidden layers to have and how the output
% information will give us an answer) ?????
% 
% (ii) how the units calculate their real value output from the weighted
% sum of real valued inputs. Metric????

% The MNIST dataset provides a training set of 60,000 handwritten digits and a validation set of 10,000 
% handwritten digits. The images have size 28 x 28 pixels. Therefore, when using a two-layer perceptron, 
% we need 28 x 28 = 784 input units and 10 output units (representing the 10 different digits).
% 
% The methods loadMNISTImages and loadMNISTLaels are used to load the MNIST dataset as 
% it is stored in a special file format. The methods can be found online at 
% http://ufldl.stanford.edu/wiki/index.php/Using_the_MNIST_Dataset.

%% ***************************** Data Import ****************************%%

% Step 0: Import training data set from local workspace directory and
% convert to pixels values. 
% Returns a matrix where columns represent stacked pixel values. 

testImages = loadMNISTImages("t10k-images.idx3-ubyte");
trainImages = loadMNISTImages("train-images.idx3-ubyte");


% Load the labels for the test and training sets. Function returns a vector
% of class labels. 

testImg_labels = loadMNISTLabels("t10k-labels.idx1-ubyte");
trainImg_labels = loadMNISTLabels("train-labels.idx1-ubyte");

%% *************************** Data conditioning ************************%%
% I would like the input unit to be a single pixel value of the 28 by 28 image.
% I represent each image as a column vector 784 X 1

% Verify data format is a column vector: begin test
% A = testImages(:,1);
% numrows = 28; 
% numcols = 28; 
% B = reshape(A,[numrows numcols]);
% imshow(B)
% End test

% Estimate Sample means from the training Data using MLE assuming Guassian
% prior distribution of classes. 
% Divide feature space into prior known classes. 

Class0_index = find(trainImg_labels == 0);
Class0 = trainImages(:,Class0_index); 
N0 = length(Class0);   % Compute number of elements in sample distribution. 
sum0 = sum(Class0, 2); % Compute sum of all image pixel values. 
mu0 = sum0./N0; % divide each pixel value by number of samples in the class. 
mu0_img = reshape(mu0, [28,28]);

Class1_index = find(trainImg_labels == 1);
Class1 = trainImages(:,Class1_index); 
N1 = length(Class1);   % Compute number of elements in sample distribution. 
sum1 = sum(Class1, 2); % Compute sum of all image pixel values. 
mu1 = sum1./N1; % divide each pixel value by number of samples in the class. 
mu1_img = reshape(mu1, [28,28]);

Class2_index = find(trainImg_labels == 2);
Class2 = trainImages(:,Class2_index); 
N2 = length(Class2);   % Compute number of elements in sample distribution. 
sum2 = sum(Class2, 2); % Compute sum of all image pixel values. 
mu2 = sum2./N2; % divide each pixel value by number of samples in the class. 
mu2_img = reshape(mu2, [28,28]);

Class3_index = find(trainImg_labels == 3);
Class3 = trainImages(:,Class3_index);
N3 = length(Class3);   % Compute number of elements in sample distribution. 
sum3 = sum(Class3, 2); % Compute sum of all image pixel values. 
mu3 = sum3./N3; % divide each pixel value by number of samples in the class. 
mu3_img = reshape(mu3, [28,28]);

Class4_index = find(trainImg_labels == 4);
Class4 = trainImages(:,Class4_index);
N4 = length(Class4);   % Compute number of elements in sample distribution. 
sum4 = sum(Class4, 2); % Compute sum of all image pixel values. 
mu4 = sum4./N4; % divide each pixel value by number of samples in the class. 
mu4_img = reshape(mu4, [28,28]);

Class5_index = find(trainImg_labels == 5);
Class5 = trainImages(:,Class5_index); 
N5 = length(Class5);   % Compute number of elements in sample distribution. 
sum5 = sum(Class5, 2); % Compute sum of all image pixel values. 
mu5 = sum5./N5; % divide each pixel value by number of samples in the class. 
mu5_img = reshape(mu5, [28,28]);

Class6_index = find(trainImg_labels == 6);
Class6 = trainImages(:,Class6_index); 
N6 = length(Class6);   % Compute number of elements in sample distribution. 
sum6 = sum(Class6, 2); % Compute sum of all image pixel values. 
mu6 = sum6./N6; % divide each pixel value by number of samples in the class. 
mu6_img = reshape(mu6, [28,28]);

Class7_index = find(trainImg_labels == 7);
Class7 = trainImages(:,Class7_index);
N7 = length(Class7);   % Compute number of elements in sample distribution. 
sum7 = sum(Class7, 2); % Compute sum of all image pixel values. 
mu7 = sum7./N7; % divide each pixel value by number of samples in the class. 
mu7_img = reshape(mu7, [28,28]);

Class8_index = find(trainImg_labels == 8);
Class8 = trainImages(:,Class8_index);
N8 = length(Class0);   % Compute number of elements in sample distribution. 
sum8 = sum(Class8, 2); % Compute sum of all image pixel values. 
mu8 = sum8./N8; % divide each pixel value by number of samples in the class. 
mu8_img = reshape(mu8, [28,28]);

Class9_index = find(trainImg_labels == 9);
Class9 = trainImages(:,Class9_index); 
N9 = length(Class9);   % Compute number of elements in sample distribution. 
sum9 = sum(Class9, 2); % Compute sum of all image pixel values. 
mu9 = sum9./N9; % divide each pixel value by number of samples in the class. 
mu9_img = reshape(mu9, [28,28]);
 

%% ************************* Weight initialization ******************** %%
% Randomly assigned weights as an initialization. The weights will be
% trained on each iteration. 
% 784*10 = 7840 weights. 10 weights for each input pixel. 

seed = 1; 
rng(seed); % initialize the rng seed for reproducability. 
